name: Deploy

on:
  push:
    branches: [bot-consolidation, main]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: coc-verifier-cluster
  ECS_SERVICE: coc-unified-bot
  TASK_FAMILY: coc-unified-bot
  ECR_REPOSITORY: coc-unified-bot
  CONTAINER_NAME: coc-unified-bot

jobs:
  setup:
    name: Setup and Change Detection
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      rebuild_unified: ${{ steps.determine.outputs.rebuild_unified }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            unified:
              - 'bots/**'
              - 'bot.py'
              - 'giveawaybot.py'
              - 'tournamentbot.py'
              - 'verifier_bot/**'
              - 'tournament_bot/**'
              - 'giveaway_fairness.py'
              - 'Dockerfile'
              - 'requirements.txt'
            infrastructure:
              - '.github/workflows/deploy.yml'
              - 'infra/**'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine build strategy
        id: determine
        run: |
          set -eo pipefail
          UNIFIED_CHANGED="${{ steps.changes.outputs.unified }}"
          echo "Unified bot files changed: ${UNIFIED_CHANGED:-false}"
          echo "rebuild_unified=${UNIFIED_CHANGED:-false}" >> "$GITHUB_OUTPUT"

  build-deploy:
    name: Build & Deploy Unified Bot
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    outputs:
      deployed: ${{ steps.deploy.outputs.deployed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login

      - name: Set up Python (dependency cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Prime dependency cache
        run: |
          pip install --user -r requirements.txt

      - name: Build unified image (conditional)
        if: needs.setup.outputs.rebuild_unified == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: |
            type=gha,scope=unified-deps
            type=gha,scope=unified-runtime
          cache-to: |
            type=gha,mode=max,scope=unified-deps
            type=gha,mode=max,scope=unified-runtime

      - name: Record image reference
        id: image
        run: |
          if [[ "${{ needs.setup.outputs.rebuild_unified }}" == "true" ]]; then
            echo "IMAGE=${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> "$GITHUB_ENV"
            echo "IMAGE_BUILT=true" >> "$GITHUB_ENV"
          else
            echo "Reusing latest unified image"
            LATEST_TAG=$(aws ecr describe-images \
              --repository-name "$ECR_REPOSITORY" \
              --region "$AWS_REGION" \
              --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
              --output text)
            echo "IMAGE=${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$LATEST_TAG" >> "$GITHUB_ENV"
            echo "IMAGE_BUILT=false" >> "$GITHUB_ENV"
          fi

      - name: Deploy unified service
        id: deploy
        run: |
          set -euo pipefail
          if [[ "$IMAGE_BUILT" == "true" ]]; then
            echo "Deploying unified bot with new image $IMAGE"
            aws ecs describe-task-definition \
              --task-definition "$TASK_FAMILY" \
              --region "$AWS_REGION" \
              --query 'taskDefinition' \
              --output json > taskdef.json

            cat taskdef.json \
              | jq '{
                  family,
                  taskRoleArn,
                  executionRoleArn,
                  networkMode,
                  containerDefinitions,
                  requiresCompatibilities,
                  cpu,
                  memory,
                  runtimePlatform
                }' \
              | jq ".containerDefinitions |= map(if .name==\"$CONTAINER_NAME\" then (.image=env.IMAGE) else . end)" \
              > updated-taskdef.json

            aws ecs register-task-definition \
              --cli-input-json file://updated-taskdef.json \
              --region "$AWS_REGION" >/dev/null

            LATEST_TD_ARN=$(aws ecs describe-task-definition \
              --task-definition "$TASK_FAMILY" \
              --region "$AWS_REGION" \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

            aws ecs update-service \
              --cluster "$ECS_CLUSTER" \
              --service "$ECS_SERVICE" \
              --task-definition "$LATEST_TD_ARN" \
              --region "$AWS_REGION"

            echo "deployed=true" >> "$GITHUB_OUTPUT"
          else
            echo "Skipping deployment (no image changes)"
            echo "deployed=false" >> "$GITHUB_OUTPUT"
          fi

  finalize:
    name: Finalize Deployment
    runs-on: ubuntu-latest
    needs: [setup, build-deploy]
    if: always()
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for service stability
        if: needs.build-deploy.outputs.deployed == 'true'
        run: |
          aws ecs wait services-stable \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "$AWS_REGION"
          echo "Unified service is stable."

      - name: Deployment summary
        run: |
          if [[ "${{ needs.build-deploy.outputs.deployed }}" == "true" ]]; then
            echo "✅ Unified bot updated successfully."
          else
            echo "ℹ️ Unified bot deployment skipped (no changes)."
          fi
