name: Deploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: coc-verifier-cluster

jobs:
  setup:
    name: Setup and Change Detection
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      rebuild_bot: ${{ steps.strategy.outputs.rebuild_bot }}
      rebuild_giveaway: ${{ steps.strategy.outputs.rebuild_giveaway }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            bot:
              - 'bot.py'
              - 'Dockerfile'
              - 'requirements.txt'
            giveaway:
              - 'giveawaybot.py'
              - 'giveaway_fairness.py'
              - 'Dockerfile.giveaway'
              - 'requirements.txt'
            infrastructure:
              - '.github/workflows/deploy.yml'
              - 'infra/**'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine build strategy
        id: strategy
        run: |
          echo "üîç Build Strategy Analysis:"
          echo "Bot files changed: ${{ steps.changes.outputs.bot }}"
          echo "Giveaway files changed: ${{ steps.changes.outputs.giveaway }}"
          echo "Infrastructure changed: ${{ steps.changes.outputs.infrastructure }}"
          
          # Force rebuild all if infrastructure changed
          if [[ "${{ steps.changes.outputs.infrastructure }}" == "true" ]]; then
            echo "üèóÔ∏è Infrastructure changed - rebuilding all components"
            echo "rebuild_bot=true" >> $GITHUB_OUTPUT
            echo "rebuild_giveaway=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild_bot=${{ steps.changes.outputs.bot }}" >> $GITHUB_OUTPUT
            echo "rebuild_giveaway=${{ steps.changes.outputs.giveaway }}" >> $GITHUB_OUTPUT
          fi

  build-deploy:
    name: Build & Deploy (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        include:
          - service: bot
            dockerfile: Dockerfile
            ecr_repository: coc-verifier-bot
            ecs_service: coc-bot
            task_definition: coc-bot
            rebuild_condition: ${{ needs.setup.outputs.rebuild_bot }}
            cache_scope: bot
            container_name: bot
          - service: giveaway
            dockerfile: Dockerfile.giveaway
            ecr_repository: coc-giveaway-bot
            ecs_service: coc-giveaway-bot
            task_definition: coc-giveaway-bot
            rebuild_condition: ${{ needs.setup.outputs.rebuild_giveaway }}
            cache_scope: giveaway
            container_name: giveaway
    outputs:
      bot_deployed: ${{ steps.deploy.outputs.bot_deployed }}
      giveaway_deployed: ${{ steps.deploy.outputs.giveaway_deployed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login

      - name: Set up Python (for dependency caching)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Cache Python dependencies
        run: |
          echo "üì¶ Pre-caching Python dependencies for ${{ matrix.service }}..."
          pip install --user -r requirements.txt

      - name: Build ${{ matrix.service }} (conditional)
        if: matrix.rebuild_condition == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: linux/arm64
          push: true
          tags: ${{ steps.login.outputs.registry }}/${{ matrix.ecr_repository }}:${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ matrix.cache_scope }}-deps
            type=gha,scope=${{ matrix.cache_scope }}-runtime
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.cache_scope }}-deps
            type=gha,mode=max,scope=${{ matrix.cache_scope }}-runtime
          target: runtime

      - name: Set ${{ matrix.service }} image (conditional)
        if: matrix.rebuild_condition == 'true'
        run: |
          echo "üî® Built ${{ matrix.service }} with caching"
          echo "IMAGE=${{ steps.login.outputs.registry }}/${{ matrix.ecr_repository }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_BUILT=true" >> $GITHUB_ENV

      - name: Reuse existing ${{ matrix.service }} image
        if: matrix.rebuild_condition != 'true'
        run: |
          echo "‚ôªÔ∏è Reusing existing ${{ matrix.service }} image..."
          # Get the latest image tag from ECR
          LATEST_TAG=$(aws ecr describe-images \
            --repository-name ${{ matrix.ecr_repository }} \
            --region $AWS_REGION \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          echo "IMAGE=${{ steps.login.outputs.registry }}/${{ matrix.ecr_repository }}:$LATEST_TAG" >> $GITHUB_ENV
          echo "IMAGE_BUILT=false" >> $GITHUB_ENV

      - name: Deploy ${{ matrix.service }} (conditional)
        id: deploy
        run: |
          set -euo pipefail
          
          if [[ "$IMAGE_BUILT" == "true" ]]; then
            echo "üöÄ Deploying ${{ matrix.service }} with new image..."
            
            # Get current task definition
            aws ecs describe-task-definition \
              --task-definition ${{ matrix.task_definition }} \
              --region "$AWS_REGION" \
              --query 'taskDefinition' \
              --output json > td-${{ matrix.service }}.json

            # Update task definition with new image
            cat td-${{ matrix.service }}.json \
              | jq '{
                  family,
                  taskRoleArn,
                  executionRoleArn,
                  networkMode,
                  containerDefinitions,
                  requiresCompatibilities,
                  cpu,
                  memory,
                  runtimePlatform
                }' \
              | jq ".containerDefinitions |= map(if .name==\"${{ matrix.container_name }}\" then (.image=env.IMAGE) else . end)" \
              > ${{ matrix.service }}-taskdef.json

            # Register new task definition
            aws ecs register-task-definition \
              --cli-input-json file://${{ matrix.service }}-taskdef.json \
              --region "$AWS_REGION" >/dev/null

            # Get latest task definition ARN
            LATEST_TD_ARN=$(aws ecs describe-task-definition \
              --task-definition ${{ matrix.task_definition }} \
              --region "$AWS_REGION" \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
            
            echo "Updating ${{ matrix.service }} service to use task definition: $LATEST_TD_ARN"
            aws ecs update-service \
              --cluster "$ECS_CLUSTER" \
              --service "${{ matrix.ecs_service }}" \
              --task-definition "$LATEST_TD_ARN" \
              --region "$AWS_REGION"
            
            echo "‚úÖ ${{ matrix.service }} deployed successfully"
            echo "${{ matrix.service }}_deployed=true" >> $GITHUB_OUTPUT
          else
            echo "‚è≠Ô∏è Skipping ${{ matrix.service }} deployment (no changes)"
            echo "${{ matrix.service }}_deployed=false" >> $GITHUB_OUTPUT
          fi

  finalize:
    name: Finalize Deployment
    runs-on: ubuntu-latest
    needs: [setup, build-deploy]
    if: always()
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for deployed services to stabilize
        run: |
          set -euo pipefail
          
          # Extract deployment results from matrix job outputs
          BOT_DEPLOYED="${{ needs.build-deploy.outputs.bot_deployed }}"
          GIVEAWAY_DEPLOYED="${{ needs.build-deploy.outputs.giveaway_deployed }}"
          
          # Build list of services that were actually deployed
          DEPLOYED_SERVICES=""
          if [[ "$BOT_DEPLOYED" == "true" ]]; then
            DEPLOYED_SERVICES="$DEPLOYED_SERVICES coc-bot"
          fi
          if [[ "$GIVEAWAY_DEPLOYED" == "true" ]]; then
            DEPLOYED_SERVICES="$DEPLOYED_SERVICES coc-giveaway-bot"
          fi
          
          if [[ -z "$DEPLOYED_SERVICES" ]]; then
            echo "üìã No services were deployed - all images were reused"
            echo "‚úÖ Deployment complete (no changes required)"
          else
            echo "‚è≥ Waiting for deployed services to stabilize:$DEPLOYED_SERVICES"
            
            if aws ecs wait services-stable \
              --cluster "$ECS_CLUSTER" \
              --services $DEPLOYED_SERVICES \
              --region "$AWS_REGION" \
              --cli-read-timeout 600; then
              echo "‚úÖ Deployment successful! Services are stable."
            else
              echo "‚ùå Deployment failed or timed out."
              exit 1
            fi
          fi

      - name: Deployment summary
        if: always()
        run: |
          # Extract results from previous jobs
          BOT_REBUILT="${{ needs.setup.outputs.rebuild_bot }}"
          GIVEAWAY_REBUILT="${{ needs.setup.outputs.rebuild_giveaway }}"
          BOT_DEPLOYED="${{ needs.build-deploy.outputs.bot_deployed }}"
          GIVEAWAY_DEPLOYED="${{ needs.build-deploy.outputs.giveaway_deployed }}"
          
          echo "üìä Deployment Summary:"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üî® Bot image built: $BOT_REBUILT"
          echo "üöÄ Bot deployed: ${BOT_DEPLOYED:-false}"
          echo "üî® Giveaway image built: $GIVEAWAY_REBUILT"
          echo "üöÄ Giveaway deployed: ${GIVEAWAY_DEPLOYED:-false}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          echo "üìã Final service status:"
          aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "coc-bot" "coc-giveaway-bot" \
            --region "$AWS_REGION" \
            --query 'services[*].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount,TaskDefinition:taskDefinition}' \
            --output table
