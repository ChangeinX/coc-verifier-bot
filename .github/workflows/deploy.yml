name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: coc-verifier-bot
      GIVEAWAY_ECR_REPOSITORY: coc-giveaway-bot
      ECS_CLUSTER: coc-verifier-cluster
      BOT_SERVICE: coc-bot
      GIVEAWAY_SERVICE: coc-giveaway-bot
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v1
        id: login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        run: |
          docker buildx build --platform linux/arm64 -t ${{ steps.login.outputs.registry }}/$ECR_REPOSITORY:$GITHUB_SHA --push .
          echo "IMAGE=${{ steps.login.outputs.registry }}/$ECR_REPOSITORY:$GITHUB_SHA" >> $GITHUB_ENV
          docker buildx build --platform linux/arm64 -t ${{ steps.login.outputs.registry }}/$GIVEAWAY_ECR_REPOSITORY:$GITHUB_SHA --push -f Dockerfile.giveaway .
          echo "GIVEAWAY_IMAGE=${{ steps.login.outputs.registry }}/$GIVEAWAY_ECR_REPOSITORY:$GITHUB_SHA" >> $GITHUB_ENV

      - name: Register new task definitions and deploy to ECS
        run: |
          set -euo pipefail

          echo "Preparing updated task definition for coc-bot..."
          aws ecs describe-task-definition \
            --task-definition coc-bot \
            --region "$AWS_REGION" \
            --query 'taskDefinition' \
            --output json > td-bot.json

          cat td-bot.json \
            | jq '{
                family,
                taskRoleArn,
                executionRoleArn,
                networkMode,
                containerDefinitions,
                requiresCompatibilities,
                cpu,
                memory,
                runtimePlatform
              }' \
            | jq ".containerDefinitions |= map(if .name==\"bot\" then (.image=env.IMAGE) else . end)" \
            > bot-taskdef.json

          aws ecs register-task-definition \
            --cli-input-json file://bot-taskdef.json \
            --region "$AWS_REGION" >/dev/null

          echo "Getting latest task definition ARN for bot service..."
          LATEST_BOT_TD_ARN=$(aws ecs describe-task-definition \
            --task-definition coc-bot \
            --region "$AWS_REGION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "Updating bot service to use task definition: $LATEST_BOT_TD_ARN"
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$BOT_SERVICE" \
            --task-definition "$LATEST_BOT_TD_ARN" \
            --region "$AWS_REGION"


          echo "Preparing updated task definition for coc-giveaway-bot..."
          aws ecs describe-task-definition \
            --task-definition coc-giveaway-bot \
            --region "$AWS_REGION" \
            --query 'taskDefinition' \
            --output json > td-giveaway.json

          cat td-giveaway.json \
            | jq '{
                family,
                taskRoleArn,
                executionRoleArn,
                networkMode,
                containerDefinitions,
                requiresCompatibilities,
                cpu,
                memory,
                runtimePlatform
              }' \
            | jq ".containerDefinitions |= map(if .name==\"giveaway\" then (.image=env.GIVEAWAY_IMAGE) else . end)" \
            > giveaway-taskdef.json

          aws ecs register-task-definition \
            --cli-input-json file://giveaway-taskdef.json \
            --region "$AWS_REGION" >/dev/null

          echo "Getting latest task definition ARN for giveaway service..."
          LATEST_GIVEAWAY_TD_ARN=$(aws ecs describe-task-definition \
            --task-definition coc-giveaway-bot \
            --region "$AWS_REGION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "Updating giveaway service to use task definition: $LATEST_GIVEAWAY_TD_ARN"
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$GIVEAWAY_SERVICE" \
            --task-definition "$LATEST_GIVEAWAY_TD_ARN" \
            --region "$AWS_REGION"

          echo "Waiting for services to stabilize..."
          if aws ecs wait services-stable \
            --cluster "$ECS_CLUSTER" \
            --services "$BOT_SERVICE" "$GIVEAWAY_SERVICE" \
            --region "$AWS_REGION" \
            --cli-read-timeout 600; then
            echo "✅ Deployment successful! Services are stable."
            
            echo "Verifying deployment status..."
            aws ecs describe-services \
              --cluster "$ECS_CLUSTER" \
              --services "$BOT_SERVICE" "$GIVEAWAY_SERVICE" \
              --region "$AWS_REGION" \
              --query 'services[*].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount,TaskDefinition:taskDefinition}' \
              --output table
          else
            echo "❌ Deployment failed or timed out. Checking service status..."
            aws ecs describe-services \
              --cluster "$ECS_CLUSTER" \
              --services "$BOT_SERVICE" "$GIVEAWAY_SERVICE" \
              --region "$AWS_REGION" \
              --query 'services[*].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount,TaskDefinition:taskDefinition}' \
              --output table
            echo "Recent service events:"
            aws ecs describe-services \
              --cluster "$ECS_CLUSTER" \
              --services "$BOT_SERVICE" "$GIVEAWAY_SERVICE" \
              --region "$AWS_REGION" \
              --query 'services[*].events[0:5].{Service:serviceName,Time:createdAt,Message:message}' \
              --output table
            exit 1
          fi
